"""
Archimedes POC2: AML Detection Enhanced with GLM-4.6

Extended version of AML detection with GLM-4.6 natural language analysis
"""

import sys
import os
import pandas as pd
import numpy as np
from typing import Dict, List
import logging

# Add integrations path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from aml_detection import AMLModelEnsemble, FeatureEngineer

try:
    from integrations.glm46_integration import ArchimedesGLMIntegration
    GLM_ENABLED = True
except ImportError:
    GLM_ENABLED = False
    logging.warning("GLM-4.6 integration not available")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class EnhancedAMLDetection:
    """AML Detection with GLM-4.6 enhanced analysis"""

    def __init__(self, use_glm: bool = True):
        """
        Initialize enhanced AML detection

        Args:
            use_glm: Whether to use GLM-4.6 for enhanced analysis
        """
        self.ensemble = AMLModelEnsemble()
        self.use_glm = use_glm and GLM_ENABLED

        if self.use_glm:
            try:
                self.glm = ArchimedesGLMIntegration()
                logger.info("GLM-4.6 enhancement enabled")
            except Exception as e:
                logger.warning(f"GLM-4.6 initialization failed: {e}")
                self.use_glm = False
        else:
            self.glm = None

    def train(self, transaction_df: pd.DataFrame, account_df: pd.DataFrame, labels: pd.Series):
        """Train the AML ensemble models"""
        self.ensemble.train(transaction_df, account_df, labels)
        logger.info("AML models trained successfully")

    def analyze_transaction(
        self,
        transaction: Dict,
        transaction_df: pd.DataFrame,
        account_df: pd.DataFrame,
        account_history: List[Dict] = None
    ) -> Dict:
        """
        Analyze a single transaction with ML models and GLM-4.6

        Args:
            transaction: Transaction to analyze
            transaction_df: Transaction data as DataFrame (single row)
            account_df: Account metadata
            account_history: Optional transaction history

        Returns:
            Complete analysis including ML scores and AI narrative
        """
        # Get ML model predictions
        predictions = self.ensemble.predict(transaction_df, account_df)

        result = {
            'transaction_id': transaction.get('transaction_id', 'unknown'),
            'ml_scores': {
                'ensemble_score': float(predictions['ensemble_score'][0]),
                'random_forest': float(predictions['random_forest_score'][0]),
                'xgboost': float(predictions['xgboost_score'][0]),
                'anomaly_score': float(predictions['anomaly_score'][0]),
                'risk_level': predictions['risk_level'][0]
            },
            'timestamp': transaction.get('timestamp'),
            'amount': transaction.get('amount')
        }

        # Add GLM-4.6 enhanced analysis if enabled
        if self.use_glm and self.glm:
            try:
                ai_analysis = self.glm.analyze_suspicious_transaction(
                    transaction,
                    result['ml_scores'],
                    account_history
                )
                result['ai_analysis'] = ai_analysis
                result['has_ai_analysis'] = True
            except Exception as e:
                logger.error(f"GLM-4.6 analysis failed: {e}")
                result['has_ai_analysis'] = False
                result['ai_analysis_error'] = str(e)
        else:
            result['has_ai_analysis'] = False

        return result

    def generate_investigation_report(
        self,
        high_risk_transactions: List[Dict],
        account_info: Dict
    ) -> str:
        """
        Generate comprehensive investigation report

        Args:
            high_risk_transactions: List of suspicious transactions
            account_info: Account metadata

        Returns:
            Detailed investigation report
        """
        if not self.use_glm or not self.glm:
            return "GLM-4.6 not available for report generation"

        try:
            # Use GLM to generate SAR narrative
            sar_narrative = self.glm.generate_sar(high_risk_transactions)

            report = f"""
SUSPICIOUS ACTIVITY INVESTIGATION REPORT
========================================

Account ID: {account_info.get('account_id', 'Unknown')}
Report Date: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}
Number of Suspicious Transactions: {len(high_risk_transactions)}

NARRATIVE (Generated by GLM-4.6):
{sar_narrative}

TRANSACTION SUMMARY:
"""
            for idx, tx in enumerate(high_risk_transactions, 1):
                report += f"\n{idx}. Transaction ID: {tx.get('transaction_id')}"
                report += f"\n   Amount: ${tx.get('amount'):,.2f}"
                report += f"\n   Date: {tx.get('timestamp')}"
                if 'ml_scores' in tx:
                    report += f"\n   Risk Score: {tx['ml_scores'].get('ensemble_score', 0):.1f}/100"

            report += "\n\n--- End of Report ---"
            return report

        except Exception as e:
            logger.error(f"Report generation failed: {e}")
            return f"Error generating report: {str(e)}"

    def batch_analyze_with_insights(
        self,
        transactions_df: pd.DataFrame,
        account_df: pd.DataFrame,
        risk_threshold: float = 70.0
    ) -> Dict:
        """
        Analyze batch of transactions and provide insights

        Args:
            transactions_df: DataFrame of transactions
            account_df: Account metadata
            risk_threshold: Minimum risk score to flag (0-100)

        Returns:
            Analysis summary with statistics and insights
        """
        logger.info(f"Analyzing {len(transactions_df)} transactions...")

        # Get predictions for all transactions
        predictions = self.ensemble.predict(transactions_df, account_df)

        # Create results dataframe
        results_df = transactions_df.copy()
        results_df['risk_score'] = predictions['ensemble_score']
        results_df['risk_level'] = predictions['risk_level']

        # Flag high-risk transactions
        high_risk = results_df[results_df['risk_score'] >= risk_threshold]

        summary = {
            'total_transactions': len(transactions_df),
            'high_risk_count': len(high_risk),
            'high_risk_percentage': (len(high_risk) / len(transactions_df) * 100) if len(transactions_df) > 0 else 0,
            'average_risk_score': float(results_df['risk_score'].mean()),
            'max_risk_score': float(results_df['risk_score'].max()),
            'risk_distribution': results_df['risk_level'].value_counts().to_dict(),
            'high_risk_transactions': high_risk.to_dict('records')[:10]  # Top 10
        }

        logger.info(f"Found {len(high_risk)} high-risk transactions ({summary['high_risk_percentage']:.1f}%)")

        return summary


def demo_enhanced_aml():
    """Demo of enhanced AML detection with GLM-4.6"""
    print("\n" + "="*60)
    print("Archimedes POC2: Enhanced AML Detection with GLM-4.6")
    print("="*60 + "\n")

    # Generate synthetic data
    print("[1/4] Generating synthetic transaction data...")
    try:
        from synthetic_data_generator import generate_synthetic_data

        accounts_df, transactions_df, labels = generate_synthetic_data(
            n_accounts=1000,
            n_transactions=10000
        )
        print(f"      Generated {len(transactions_df):,} transactions")
        print(f"      Suspicious rate: {(labels.sum() / len(labels) * 100):.1f}%")
    except ImportError:
        print("      ERROR: synthetic_data_generator not found")
        return

    # Train models
    print("\n[2/4] Training ML ensemble models...")
    aml_system = EnhancedAMLDetection(use_glm=True)
    aml_system.train(transactions_df, accounts_df, labels)
    print("      Training complete")

    # Analyze batch
    print("\n[3/4] Analyzing transactions...")
    analysis = aml_system.batch_analyze_with_insights(
        transactions_df.head(1000),
        accounts_df,
        risk_threshold=70.0
    )

    print(f"\n      ANALYSIS RESULTS:")
    print(f"      - Total analyzed: {analysis['total_transactions']:,}")
    print(f"      - High risk: {analysis['high_risk_count']} ({analysis['high_risk_percentage']:.1f}%)")
    print(f"      - Average risk score: {analysis['average_risk_score']:.1f}/100")
    print(f"      - Max risk score: {analysis['max_risk_score']:.1f}/100")

    print(f"\n      Risk Distribution:")
    for level, count in analysis['risk_distribution'].items():
        print(f"        {level.upper()}: {count}")

    # Detailed analysis of top suspicious transaction
    print("\n[4/4] GLM-4.6 Enhanced Analysis of Top Risk Transaction...")

    if analysis['high_risk_count'] > 0:
        # Get the highest risk transaction
        top_risk_tx = analysis['high_risk_transactions'][0]

        # Prepare transaction data for detailed analysis
        tx_data = {
            'transaction_id': top_risk_tx.get('transaction_id', 'TX_UNKNOWN'),
            'amount': top_risk_tx['amount'],
            'from_country': top_risk_tx['from_country'],
            'to_country': top_risk_tx['to_country'],
            'timestamp': str(top_risk_tx['timestamp']),
            'is_cross_border': top_risk_tx.get('is_cross_border', False)
        }

        # Create single-row dataframe for prediction
        tx_df = pd.DataFrame([top_risk_tx])

        # Get detailed analysis
        detailed = aml_system.analyze_transaction(
            tx_data,
            tx_df,
            accounts_df
        )

        print(f"\n      Transaction: {detailed['transaction_id']}")
        print(f"      Amount: ${detailed['amount']:,.2f}")
        print(f"      Risk Score: {detailed['ml_scores']['ensemble_score']:.1f}/100")
        print(f"      Risk Level: {detailed['ml_scores']['risk_level'].upper()}")

        if detailed.get('has_ai_analysis'):
            print(f"\n      AI ANALYSIS (GLM-4.6):")
            print(f"      {'-' * 56}")
            ai_text = detailed['ai_analysis'].get('analysis', 'Not available')
            # Print first 500 chars
            print(f"      {ai_text[:500]}...")
            print(f"      {'-' * 56}")
        else:
            print(f"\n      AI Analysis: Not available (set GLM_API_KEY)")

    print("\n" + "="*60)
    print("Enhanced AML Detection Demo Complete!")
    print("="*60)

    if GLM_ENABLED and os.getenv('GLM_API_KEY'):
        print("\nGLM-4.6 Integration: ACTIVE")
    else:
        print("\nGLM-4.6 Integration: INACTIVE")
        print("Set GLM_API_KEY environment variable to enable AI analysis")

    print("\n")


if __name__ == "__main__":
    demo_enhanced_aml()
